name: terraform-scan-iac-adopipeline

trigger:
  branches:
    include:
      - main

variables:
  vmImageName: 'ubuntu-latest'

# This Azure pipeline is to trigger Terraform running on Docker

pool:
  vmImage: $(vmImageName) 
  #name: ADO-pool-01

parameters:
- name: TerraformProjectDirectory
  default: 'terraform/projects/my-tf-project'
- name: TerraformModuleDirectory
  default: 'terraform/modules'  
- name: TerraformWorkspace
  default: 'new'
  values:
  - select
  - new
- name: ExecutedBy
  default: 'e2esa'
- name: TerraformAction
  displayName: 'Select Action'
  default: 'apply'
  values:
  - apply
  - destroy
- name: Environment
  displayName: 'Select Environment'
  default: 'dev'
  values:
  - dev
  - prod

stages:
- stage: build
  displayName: 'Build env ${{paramaters.Environment}}'
  jobs:
  - job: Iac_Scan
    displayName: 'Install Checkov'
    steps:
    - script: |
        sudo apt install software-properties-common
        sudo apt install python3.9
        python3 --version
        sudo apt install python3-pip
      displayName: 'Install Checkov'
  - job: Env_Build
    displayName: 'Build Environment'
    steps:
    - task: CopyFiles@2
      displayName: 'Copy Terraform Files'
      inputs:
        SourceFolder: ${{paramaters.TerraformProjectDirectory}}   
        Contents: |
         **
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: CopyFiles@2
      displayName: 'Copy Terraform Modules'
      inputs:
        SourceFolder: ${{paramaters.TerraformModuleDirectory}}   
        Contents: |
         **
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Terraform Files'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'  
        ArtifactName: 'drop'
        publishLocation: 'Container'
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        checkov --directory $(Build.ArtifactStagingDirectory) -o junitxml > checkov-report.xml
      displayName: 'Checkov report'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Checkov report'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'  
        testResultsFiles: '**/*checkov-report.xml'
        serchFolder: $(Build.ArtifactStagingDirectory)
        mergeTestResults: false
        testRunTitle: Checkov module scan
        failTasksOnFailedTests: false
        publishRunAttachments: true
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 -version
        docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 init 
        docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 workspace ${{paramaters.TerraformWorkspace}} ${{paramaters.Environment}} 
      displayName: 'Initialize Terraform'
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 validate
      displayName: 'Validate'
    - script: |
        cd $(Build.ArtifactStagingDirectory)
        docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 plan -var-file="${{paramaters.Environment}}-app.tfvars" -var="env=${{paramaters.Environment}}" -var="createdBy=${{paramaters.ExecutedBy}}"
      displayName: 'Plan Terraform'
- stage: deploy
  dependsOn: build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'Pull Request'))
  displayName: 'Deploy to env: ${{paramaters.Environment}}'
  jobs:
  - deployment: approve_apply
    displayName: 'Review and Approve'
    environment: approve-${{paramaters.Environment}} 
    strategy:
      runOnce:
        deploy: 
          steps: 
          - script:
              cd $(Build.ArtifactStagingDirectory)
              cd .. 
              cd drop 
              docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 init
              docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 workspace show 
              docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 workspace select ${{paramaters.Environment}} 
            displayName: 'Initialize Terraform'
          - script:
              cd $(Build.ArtifactStagingDirectory)
              cd .. 
              cd drop 
              ls
              docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 ${{paramaters.TerraformAction}} -var-file="${{paramaters.Environment}}-app.tfvars" -var="env=${{paramaters.Environment}}"  -var="createdBy=${{paramaters.ExecutedBy}}" -auto-approve
              docker run --rm -u 1099:1099 -v $PWD:/data -v $PWD/../modules:/modules -v /opt/terraform/tf_cache:tf_cache -w /data -e TF_PLUGIN_CACHE_DIR="/tf_cache" -e TF_CLI_CONFIG_FILE="/tf_cache/.terraformrc" hashicorp/terraform:2.1.0 workspace show 
            displayName: 'Action Terraform'



